/**
 * Represents a way. A way is automatically added to the geohash index when
 * it is instantiated.
 * 
 * @augments Feature
 */
var Relation = Class.create(Feature, 
/**
 * @lends Node#
 */
{
	/**
	 * Ways (and nodes, but that hasn't been implemented) that make up this relation
	 */
	members: [],
	/**
	 * Sets up this relations's properties and adds it to the geohash index
	 * @param {Object} data     A set of properties that will be copied to this Way.
	 * @constructs
	 */
    initialize: function($super, data) {
		$super()
		
		this.id = Cartagen.relations.size()
		/**
		 * Number of frames this Way has existed for
		 * @type Number
		 */
		this.age = 0
		/**
		 * If true, this way will have a red border
		 * @type Boolean
		 */
		this.highlight = false
		/**
		 * If true, this way will be treated a a polygon and filled when drawn
		 * @type Boolean
		 */
		this.coastline = true // because all relations are currently coastlines

		this.outline_color = null
		this.outline_width = null
		
		Object.extend(this, data)
		
		this.collect_ways()
		
		if (this.nodes.length > 1 && this.nodes.first().x == this.nodes.last().x && 
			this.nodes.first().y == this.nodes.last().y) 
				this.closed_poly = true
		
		if (this.tags.get('natural') == 'coastline') {
			this.coastline = true
		}
		if (this.tags.get('natural') == "land") this.island = true
		
		if (this.closed_poly) {
			var centroid = Geometry.poly_centroid(this.nodes)
			this.x = centroid[0]*2
			this.y = centroid[1]*2
		} else {
			// attempt to make letters follow line segments:
			this.x = (this.middle_segment()[0].x+this.middle_segment()[1].x)/2
			this.y = (this.middle_segment()[0].y+this.middle_segment()[1].y)/2
		}
		
		this.area = Geometry.poly_area(this.nodes)
		// $l(this.nodes)
		this.bbox = Geometry.calculate_bounding_box(this.nodes)
		
		// calculate longest dimension to file in a correct geohash:
		this.width = Math.abs(Projection.x_to_lon(this.bbox[1])-Projection.x_to_lon(this.bbox[3]))
		this.height = Math.abs(Projection.y_to_lat(this.bbox[0])-Projection.y_to_lat(this.bbox[2]))
		
		Style.parse_styles(this,Style.styles.relation)
		// Geohash.put_object(this)
		Cartagen.relations.set('coastline_'+this.id,this)
    },
	/**
	 * Nodes of all member ways. Generated by Relation.collect_ways()
	 */
	nodes: [],
	/**
	 * Collected tags of all member ways. Generated by Relation.collect_ways()
	 */
	tags: new Hash(),
	/**
	 * Collects member ways into one long way.
	 */
	collect_ways: function() {
		this.members.each(function(member) {
			this.nodes = member.nodes.concat(this.nodes)
			if (member.tags.size() > 0) this.tags.merge(member.tags)
		},this)
	},
	/**
	 * Draws this way on the canvas
	 */
	draw: function($super) {
		$super()
		this.age += 1;
	},
	/** 
	 * Finds the middle-most line segment
	 * @return a tuple of nodes
	 * @type Node[]
	 */	
	 middle_segment: Way.prototype.middle_segment,
	/**
	 * Finds the angle of the middle-most line segment
	 * @return The angle, in radians
	 * @type Number
	 */
	 middle_segment_angle: Way.prototype.middle_segment_angle,
	/**
	 * Applies hover and mouseDown styles
	 */
	style: Way.prototype.style,
	/**
	 * Draws on the canvas to display this relation
	 */
	shape: function() {

		if (this.highlight) {
			$C.line_width(3/Cartagen.zoom_level)
			$C.stroke_style("red")
		}
		// fade in after load:
		if (Object.isUndefined(this.opacity)) this.opacity = 1

		$C.begin_path()
		
		if (Map.resolution == 0) Map.resolution = 1
		var is_inside = true, first_node = true, last_node,start_corner,end_corner
		this.nodes.each(function(node,index){
			if (is_inside) {
				if (true) {//(index % Map.resolution == 0) || index == 0 || index == this.nodes.length-1) {// || this.nodes.length <= 30) {
					if (first_node && this.coastline && !this.closed_poly) {
						start_corner = Viewport.nearest_corner(this.nodes[0].x,this.nodes[0].y)
						$C.move_to(start_corner[0],start_corner[1])
						first_node = false
					}
					$C.line_to(node.x,node.y)
					is_inside = true
				}
			}
			last_node = node
			is_inside = true //(Math.abs(node.x - Map.x) < Viewport.width/2 && Math.abs(node.y - Map.y) < Viewport.height/2)
		},this)
				// $C.save()
				// $C.fill_style('red')
				// $C.rect(last_node.x,last_node.y,50,50)
				// $C.restore()
		
		if (this.coastline && !this.closed_poly) {
			end_corner = Viewport.nearest_corner(last_node.x,last_node.y)
			var bbox = Viewport.full_bbox()
			// var start = Math.min(end_corner[2],start_corner[2])
			// var end = Math.max(end_corner[2],start_corner[2])
			var start = end_corner[2]
			var end = start_corner[2]
			if (start > end) var slice_end = bbox.length
			else var slice_end = end+1
			var cycle = bbox.slice(start+1,slice_end) // path clockwise to walk around the viewport
			if (start > end) cycle = cycle.concat(bbox.slice(0,end+1)) //loop around from 3 back to 0
			cycle.each(function(coord) {
				$C.line_to(coord[0],coord[1])
			},this)
		}
		
		// fill the polygon if the beginning and end nodes are the same.
		// we'll have to change this for open polys, like coastlines
		if (this.outlineColor && this.outlineWidth) $C.outline(this.outlineColor,this.outlineWidth)
		else $C.stroke()
		if (this.island) {
			if (Style.styles.body.opacity) $C.opacity(Style.styles.body.opacity)
			if (Style.styles.body.fillStyle) $C.fill_style(Style.styles.body.fillStyle)
			$C.opacity(1)
			if (Style.styles.body.pattern && Style.styles.body.pattern.src) {
				var value = Style.styles.body.pattern
				this.pattern = new Image()
				this.pattern.src = value
				$C.fill_pattern(this.pattern, 'repeat')	
			}
		}
		if (this.closed_poly || this.coastline) $C.fill()
		
	},
	apply_default_styles: Feature.prototype.apply_default_styles,
	refresh_styles: function() {
		this.apply_default_styles()
		Style.parse_styles(this, Style.styles.relation)
	}
})
